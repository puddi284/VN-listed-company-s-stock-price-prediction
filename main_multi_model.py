# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15YEBuUwPqF8Tz_rrS34iAll1kgJy4Ttr
"""

import numpy as np
import os
import json
from preparation import create_log_return_data_scaled
from model import (
    train_lstm_model, train_gru_model, train_bilstm_model,
    train_cnn_model, train_lstm_cnn_hybrid, train_ml_models,
    evaluate_model
)
from utils import inverse_transform_predictions_safe

processed_dir = "vn-stock-prediction/data/processed"
symbols = [f.split("_")[0] for f in os.listdir(processed_dir) if f.endswith("_processed.csv")]
start_page = 1
end_page = 40
target_col = "GiaDongCua"
target_col_log = "log_" + target_col

feature_cols = [
    'Return', 'MA5', 'MA10', 'MA20', 'Volatility_5',
    'OpenCloseGap', 'HighLowRange', 'VolumeChange',
    'log_GiaDongCua_lag1'
]

dl_models = {
    "LSTM": train_lstm_model,
    "GRU": train_gru_model,
    "BiLSTM": train_bilstm_model,
    "CNN": train_cnn_model,
    "Hybrid": train_lstm_cnn_hybrid
}

os.makedirs("vn-stock-prediction/reports/dl", exist_ok=True)
os.makedirs("vn-stock-prediction/reports/ml", exist_ok=True)

for symbol in symbols:
    print(f"üìà ƒêang x·ª≠ l√Ω m√£: {symbol}")
    try:
        X_train, y_train, X_test, y_test, y_true_log, scaler, all_cols = create_log_return_data_scaled(
            symbol=symbol,
            start_page=start_page,
            end_page=end_page,
            target_col=target_col,
            feature_cols=feature_cols,
            window_size=10,
            test_size=0.2,
            stride=1,
            scaler_type="minmax"
        )
        y_true_real = np.expm1(y_true_log)

        # Deep Learning
        dl_results = {}
        y_pred_scaled_dict = {}
        for name, trainer in dl_models.items():
            model, _ = trainer(X_train, y_train, X_test, y_test)
            y_pred_scaled = model.predict(X_test).flatten()
            y_pred_scaled_dict[name] = y_pred_scaled

        dl_pred_real = inverse_transform_predictions_safe(
            y_pred_scaled_dict=y_pred_scaled_dict,
            X_test=X_test,
            scaler=scaler,
            target_col_log=target_col_log,
            all_cols=all_cols,
            return_log=False
        )

        for name, y_pred_real in dl_pred_real.items():
            dl_results[name] = evaluate_model(y_true_real, y_pred_real)

        # Machine Learning
        ml_results = train_ml_models(
            X_train, y_train, X_test, y_test,
            scaler=scaler,
            all_cols=all_cols,
            target_col_log=target_col_log,
            X_test_seq=X_test,
            y_true_log=y_true_log,
            inverse_transform_func=inverse_transform_predictions_safe
        )

        # Save results
        with open(f"vn-stock-prediction/reports/dl/{symbol}_dl.json", "w", encoding="utf-8") as f:
            json.dump(dl_results, f, indent=4)
        with open(f"vn-stock-prediction/reports/ml/{symbol}_ml.json", "w", encoding="utf-8") as f:
            json.dump(ml_results, f, indent=4)

        print(f"‚úÖ ƒê√£ l∆∞u k·∫øt qu·∫£ cho {symbol}")
    except Exception as e:
        print(f"‚ùå L·ªói v·ªõi {symbol}: {e}")