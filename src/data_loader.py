# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15YEBuUwPqF8Tz_rrS34iAll1kgJy4Ttr
"""

import os
import ast
import requests
import pandas as pd

def crawl_data(symbol, page_index, start_date="01/01/2022", end_date="02/28/2025"):
    url = "https://cafef.vn/du-lieu/Ajax/PageNew/DataHistory/PriceHistory.ashx"
    params = {
        "Symbol": symbol,
        "StartDate": start_date,
        "EndDate": end_date,
        "PageIndex": page_index,
        "PageSize": 20,
    }
    try:
        response = requests.get(url, params=params, timeout=10)
        response.raise_for_status()
        return pd.DataFrame(response.json().get("Data", []))
    except Exception as e:
        print(f"❌ Failed to fetch page {page_index} for {symbol}: {e}")
        return None

def parse_data(data_string):
    if isinstance(data_string, str):
        try:
            return ast.literal_eval(data_string.strip("()"))
        except:
            return {}
    return data_string if isinstance(data_string, dict) else {}

def parse_df(symbol, start_page, end_page):
    dfs = []
    for i in range(start_page, end_page):
        df = crawl_data(symbol, i)
        if df is not None:
            dfs.append(df)
    df = pd.concat(dfs, ignore_index=True) if dfs else pd.DataFrame()
    if df.empty:
        return df

    df['Data'] = df['Data'].apply(parse_data)
    df = pd.concat([df, pd.DataFrame(df['Data'].tolist())], axis=1)

    if 'ThayDoi' in df.columns:
        df[['Price_change', '%Price_change']] = df['ThayDoi'].apply(
            lambda val: pd.Series([val.split('(')[0], val.split('(')[1].rstrip('%)')]) if '(' in val else pd.Series([0, 0])
        )

    df.drop(columns=['Data', 'index', 'TotalCount', 'ThayDoi'], inplace=True, errors='ignore')
    df[['Price_change', '%Price_change']] = df[['Price_change', '%Price_change']].astype(float, errors='ignore')

    # Chuyển giá từ nghìn đồng sang đồng
    for col in ['GiaDieuChinh', 'GiaDongCua', 'GiaMoCua', 'GiaCaoNhat', 'GiaThapNhat', 'Price_change']:
        if col in df.columns:
            df[col] = df[col].astype(float, errors='ignore') * 1000

    df['Ngay'] = pd.to_datetime(df['Ngay'], format="%d/%m/%Y", errors='coerce')
    df = df.dropna(subset=['Ngay'])
    df = df.sort_values('Ngay').reset_index(drop=True)
    df['Return'] = df['GiaDongCua'].pct_change()
    return df.dropna().reset_index(drop=True)

def preprocess_df(df):
    df['Ngay'] = pd.to_datetime(df['Ngay'], errors='coerce')
    df = df.dropna(subset=['Ngay'])
    df = df.sort_values('Ngay').reset_index(drop=True)
    df['Return'] = df['GiaDongCua'].pct_change()
    df['MA5'] = df['GiaDongCua'].rolling(window=5).mean()
    df['MA10'] = df['GiaDongCua'].rolling(window=10).mean()
    df['MA20'] = df['GiaDongCua'].rolling(window=20).mean()
    df['Volatility_5'] = df['Return'].rolling(window=5).std()
    df['OpenCloseGap'] = df['GiaDongCua'] - df['GiaMoCua']
    df['HighLowRange'] = df['GiaCaoNhat'] - df['GiaThapNhat']
    df['VolumeChange'] = df['KhoiLuongKhopLenh'].pct_change()
    return df.dropna().reset_index(drop=True)

if __name__ == "__main__":
    input_dir = "vn-stock-prediction/data/raw"
    output_dir = "vn-stock-prediction/data/processed"
    os.makedirs(output_dir, exist_ok=True)

    for filename in os.listdir(input_dir):
        if filename.endswith(".csv"):
            symbol = filename.replace("_raw.csv", "")
            print(f"⚙️ Đang xử lý: {symbol}")
            df = pd.read_csv(os.path.join(input_dir, filename))
            processed_df = preprocess_df(df)
            output_path = os.path.join(output_dir, f"{symbol}_processed.csv")
            processed_df.to_csv(output_path, index=False)
            print(f"✅ Đã lưu: {output_path}")